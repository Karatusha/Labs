#include <iostream>

template<typename T>
class LinkedList {
private:
    struct Node {
        T data;
        Node* next;
    };

    Node* head;

public:
    LinkedList() : head(nullptr) {}

    void AddItem(const T& item) {
        Node* newNode = new Node;
        newNode->data = item;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        }
        else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void RemoveItem() {
        if (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    bool operator!=(const LinkedList<T>& other) {
        Node* current1 = head;
        Node* current2 = other.head;

        while (current1 != nullptr && current2 != nullptr) {
            if (current1->data != current2->data) {
                return true;
            }

            current1 = current1->next;
            current2 = current2->next;
        }

        return current1 != nullptr || current2 != nullptr;
    }
};

int main() {

    LinkedList<int> list1;
    list1.AddItem(1);
    list1.AddItem(2);
    list1.AddItem(3);

    LinkedList<int> list2;
    list2.AddItem(1);
    list2.AddItem(2);
    list2.AddItem(3);

    LinkedList<int> list3;
    list3.AddItem(4);
    list3.AddItem(5);
    list3.AddItem(6);

    if (list1 != list2) {
        std::cout << "list1 та list2 не рівні." << std::endl;
    }
    else {
        std::cout << "list1 та list2 рівні." << std::endl;
    }

    if (list1 != list3) {
        std::cout << "list1 та list3 не рівні." << std::endl;
    }
    else {
        std::cout << "list1 та list3 рівні." << std::endl;
    }

    return 0;
}
